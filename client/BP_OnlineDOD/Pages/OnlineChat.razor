@using System.Net.Http
@using Message
@page "/online-chat"
@inject HttpClient httpClient
@inject NavigationManager navigationManager

<h1>Online deň otvorených dverí</h1>
<p>
    Pridávanie otázok a reakcií je <b>otvorené</b>.
</p>

<hr class="mb-4" />

@if (state == STATE.NONE) // if app is in STATE NONE (initial state)
{
    <button @onclick="ToCreate" class="btn btn-primary mb-5"><span class="oi oi-chat mr-2"></span>Napísať správu</button>
}

@if (state == STATE.CREATE) // if app is in CREATE state
{
    <h4>Nová správa</h4>
    <textarea @bind="TextToSend"
              class="form-control mb-2"
              placeholder="Správa..."
              rows="5"
              oninput="this.style.height = 'auto'; this.style.height = (this.scrollHeight) + 'px';"></textarea>

    <div class="mb-5">
        <button @onclick="Add" type="submit" class="btn btn-primary"><span class="oi oi-envelope-closed mr-2"></span>Odoslať</button>
        <button @onclick="ToNone" class="btn btn-primary float-right"><span class="oi oi-x mr-2"></span>Zrušiť správu</button>
    </div>
}

@if (state == STATE.EDIT_DELETE) // if app is in DELETE state
{
    <h4>Úprava správy</h4>
    <textarea @bind="TextToSend"
              class="form-control mb-2"
              placeholder="Správa..."
              rows="5"
              oninput="this.style.height = 'auto'; this.style.height = (this.scrollHeight) + 'px';"></textarea>

    <div class="mb-5">
        <button @onclick="Edit" class="btn btn-primary"><span class="oi oi-pencil mr-2"></span>Upraviť</button>
        <button @onclick="Delete" class="btn btn-primary"><span class="oi oi-trash mr-2"></span>Odstrániť</button>
        <button @onclick="ToNone" class="btn btn-primary float-right"><span class="oi oi-x mr-2"></span>Zrušiť úpravy</button>
    </div>
}

@if (Messages != null) // wait for all messages to load first
{
    foreach (Message msg in Messages.Reverse())
    {
        <div class="card mb-4">
            <div class="card-body p-3">
                <h5 class="card-title">
                    Anonym
                    <button @onclick="(() => ShowEdit(msg.Id))" class="btn btn-sm btn-primary float-right"><span class="oi oi-pencil mr-2"></span>Upraviť</button>
                </h5>
                <div class="card-subtitle mb-2">
                    <div class="badge badge-info px-2 py-1">
                        <span class="oi oi-thumb-up"></span>
                        @msg.ThumbsUpCount
                    </div>
                    <div class="badge badge-secondary px-2 py-1">@msg.TimeSent.ToLocalTime().ToString("dd.MM. yyyy HH:mm:ss")</div>
                    <small class="text-muted d-none">ID správy: @msg.Id</small>
                </div>
                <p class="card-text p-2">@msg.Text</p>
            </div>
        </div>
    }
}


@code {
    public virtual int SelectedMessageId { get; set; }

    public virtual string TextToSend { get; set; }

    public virtual IEnumerable<Message> Messages { get; set; }

    public async Task Add(EventArgs eventArgs)
    {
        var payload = new { Text = TextToSend, ThumbsUpCount = new Random().Next(0, 100) };

        var response = await httpClient.PostAsJsonAsync("https://localhost:44317/api/messages", payload);

        state = STATE.NONE;

        if (response.IsSuccessStatusCode)
        {
            await Load();

            //var message = await response.Content.ReadFromJsonAsync<Message>();

            //navigationManager.NavigateTo("online-chat", true);
        }
    }

    public async Task Edit(EventArgs eventArgs)
    {
        var message = await httpClient.GetFromJsonAsync<Message>("https://localhost:44317/api/messages/" + SelectedMessageId);

        var payload = new Message()
        {
            Id = message.Id,
            Text = TextToSend,
            ThumbsUpCount = message.ThumbsUpCount,
            TimeSent = message.TimeSent
        };

        var response = await httpClient.PutAsJsonAsync("https://localhost:44317/api/messages/" + message.Id, payload);

        state = STATE.NONE;

        if (response.IsSuccessStatusCode)
        {
            await Load();

            //var message = await response.Content.ReadFromJsonAsync<Message>();

            //navigationManager.NavigateTo("online-chat", true);
        }
    }

    public async Task Delete(EventArgs eventArgs)
    {
        var response = await httpClient.DeleteAsync("https://localhost:44317/api/messages/" + SelectedMessageId);

        state = STATE.NONE;

        if (response.IsSuccessStatusCode)
        {
            await Load();

            //var message = await response.Content.ReadFromJsonAsync<Message>();

            //navigationManager.NavigateTo("online-chat", true);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await Load();
    }


    protected async Task Load()
    {
        Messages = await httpClient.GetFromJsonAsync<IEnumerable<Message>>("https://localhost:44317/api/messages");
    }

    protected async Task ShowEdit(int id)
    {
        var message = await httpClient.GetFromJsonAsync<Message>("https://localhost:44317/api/messages/" + id);

        SelectedMessageId = message.Id;
        TextToSend = message.Text;
        state = STATE.EDIT_DELETE;
    }

    private enum STATE
    {
        NONE,
        CREATE,
        EDIT_DELETE
    }
    STATE state = STATE.NONE;

    protected void ClearFields()
    {
        TextToSend = null;
    }

    protected void ToCreate()
    {
        ClearFields();
        state = STATE.CREATE;
    }

    protected void ToNone()
    {
        ClearFields();
        state = STATE.NONE;
    }
}
