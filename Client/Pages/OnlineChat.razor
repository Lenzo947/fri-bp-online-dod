@page "/online-chat"
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject IJSRuntime JS
@inject ILocalStorageService localStorage

<h1>Online deň otvorených dverí</h1>
<p>
    Pridávanie otázok a reakcií je <b>otvorené</b>.
</p>

<hr class="mb-4" />

<EditForm Model="MessageModel" OnValidSubmit="Add">

    <DataAnnotationsValidator />

    <label for="author">Meno</label>
    <InputText @bind-Value="MessageModel.Author" class="form-control mb-2" id="author" placeholder="Anonym"></InputText>

    <label for="title">Správa</label>
    <InputTextArea @bind-Value="MessageModel.Text" class="form-control mb-2" id="title" placeholder="Správa..." rows="5"
                   oninput="this.style.height = 'auto'; this.style.height = (this.scrollHeight) + 'px';"></InputTextArea>
    <ValidationMessage For="@(() => MessageModel.Text)" />

    @if (Attachment)
    {
        <AttachmentWindow />
    }
    
<div class="mb-5 mt-2">
    <button type="submit" class="btn btn-primary btn-sm mr-2"><span class="oi oi-envelope-closed mr-2"></span>Odoslať</button>
    @if (Attachment)
    {
        <a @onclick="ToggleAttach"><span class="oi oi-link-intact text-danger mr-2"></span>Zrušiť prílohy</a>
    }
    else
    {
        <a @onclick="ToggleAttach"><span class="oi oi-link-intact mr-2"></span>Pridať prílohy</a>
    }
</div>
</EditForm>

@if (Messages != null) // wait for all messages to load first
{
    foreach (Message msg in Messages.Reverse())
    {
        if (msg.ParentMessageId == null)
        {
            <CascadingValue Value="Author">
                <CascadingValue Value="UpvotedMessages">
                    <MessageCard msg="@msg" Classes="mb-4" />
                </CascadingValue>
            </CascadingValue>
        }
    }
}
else
{
    <SpinnerBig Classes="text-primary mb-4" />
}

@code {
    public IList<int> UpvotedMessages { get; set; } = new List<int>();

    public bool Attachment { get; set; } = false;

    public string Author { get; set; } = "";

    private Timer _timer { get; set; }

    protected Message MessageModel { get; set; } = new Message();

    public virtual ICollection<Message> Messages { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!await localStorage.ContainKeyAsync("upvotedMessages"))
        {
            await localStorage.SetItemAsync<IList<int>>("upvotedMessages", new List<int>());
        }
        else
        {
            UpvotedMessages = await localStorage.GetItemAsync<IList<int>>("upvotedMessages");
        }

        if (!await localStorage.ContainKeyAsync("author"))
        {
            await localStorage.SetItemAsync<string>("author", "");
        }
        else
        {
            Author = await localStorage.GetItemAsync<string>("author");
        }

        MessageModel.Author = Author;

        await Load();

        _timer = new Timer(5000);
        _timer.Elapsed += async (s, e) =>
        {
            await InvokeAsync(Load);
        };
        _timer.Enabled = true;

    }

    protected async Task Load()
    {

        Messages = await httpClient.GetFromJsonAsync<ICollection<Message>>("api/messages");

        StateHasChanged();

        //var _messages = await httpClient.GetFromJsonAsync<ICollection<Message>>("api/messages");

        //if (Messages != null)
        //{
        //    bool found;
        //    for (int i = 0; i < _messages.Count; i++)
        //    {
        //        found = false;
        //        var newMsg = _messages.ElementAt(i);
        //        int j;

        //        for (j = 0; j < Messages.Count; j++)
        //        {
        //            var msg = Messages.ElementAt(j);

        //            if (newMsg.Id == msg.Id && (newMsg.Author != msg.Author || newMsg.Text != msg.Text || newMsg.ThumbsUpCount != msg.ThumbsUpCount || newMsg.Deleted != msg.Deleted))
        //            {
        //                Messages.Remove(msg);
        //                Messages.Add(newMsg);
        //                found = true;
        //                break;
        //            }
        //        }

        //        if (!found)
        //        {
        //            Messages.Add(newMsg);
        //        }
        //    }

        //    Messages = Messages.OrderBy(msg => msg.TimeSent).ToList();

        //    StateHasChanged();
        //}
        //else
        //{
        //    Messages = _messages;
        //}


        //await JS.InvokeVoidAsync("checkResize");
    }

    protected async Task Add()
    {
        if (MessageModel.Author == "")
        {
            MessageModel.Author = "Anonym";
        }
        else
        {
            Author = MessageModel.Author;
            await localStorage.SetItemAsync<string>("author", MessageModel.Author);
        }

        var payload = new { Author = MessageModel.Author, Text = MessageModel.Text };

        var response = await httpClient.PostAsJsonAsync("api/messages", payload);

        if (response.IsSuccessStatusCode)
        {
            ClearFields();

            await Load();
        }
    }

    protected void ToggleAttach()
    {
        Attachment = !Attachment;
    }

    protected void ClearFields()
    {
        MessageModel.Text = null;
        Attachment = false;
    }

}