@page "/online-chat"
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject IJSRuntime JS
@inject ILocalStorageService localStorage

<h1>Online deň otvorených dverí</h1>
<p>
    Pridávanie otázok a reakcií je <b>otvorené</b>.
</p>

<hr class="mb-4" />

<EditForm Model="MessageModel" OnValidSubmit="Add">
    <DataAnnotationsValidator />

    <label for="title">Nová správa</label>

    <InputTextArea @bind-Value="MessageModel.Text" class="form-control mb-2" id="title" placeholder="Správa..." rows="5"
                   oninput="this.style.height = 'auto'; this.style.height = (this.scrollHeight) + 'px';"></InputTextArea>
    <ValidationMessage For="@(() => MessageModel.Text)" />

    <div class="mb-5 mt-2">
        <button type="submit" class="btn btn-primary btn-sm"><span class="oi oi-envelope-closed mr-2"></span>Odoslať</button>
    </div>
</EditForm>

@if (Messages != null) // wait for all messages to load first
{
    foreach (Message msg in Messages.Reverse())
    {
        if (msg.ParentMessageId == null)
        {
            <CascadingValue Value="UpvotedMessages">
                <MessageCard msg="@msg" Classes="mb-4" />
            </CascadingValue>
        }
    }
}
else
{
    <SpinnerBig Classes="text-primary mb-4" />
}

@code {
    public IList<int> UpvotedMessages { get; set; } = new List<int>();

    private Timer _timer { get; set; }

    protected Message MessageModel { get; set; } = new Message();

    public virtual IEnumerable<Message> Messages { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!await localStorage.ContainKeyAsync("upvotedMessages"))
        {
            await localStorage.SetItemAsync<IList<int>>("upvotedMessages", new List<int>());
        }

        UpvotedMessages = await localStorage.GetItemAsync<IList<int>>("upvotedMessages");

        await Load();

        _timer = new Timer(5000);
        _timer.Elapsed += async (s, e) =>
        {
            await InvokeAsync(Load);
        };
        _timer.Enabled = true;

    }

    protected async Task Load()
    {
        var _messages = await httpClient.GetFromJsonAsync<ICollection<Message>>("api/messages");

        if (Messages != null)
        {
            Messages = Messages.Union(_messages, new MessageComparer()).ToList();

            StateHasChanged();
        }
        else
        {
            Messages = _messages;
        }

        //await JS.InvokeVoidAsync("checkResize");
    }

    protected async Task Add()
    {
        var payload = new { Text = MessageModel.Text };

        var response = await httpClient.PostAsJsonAsync("api/messages", payload);

        if (response.IsSuccessStatusCode)
        {
            ClearFields();

            await Load();
        }
    }

    protected void ClearFields()
    {
        MessageModel.Text = null;
    }

}