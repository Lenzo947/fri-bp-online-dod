@inject IMessagesRepository MessagesRepository
@inject NavigationManager navigationManager
@inject ILocalStorageService localStorage

<div class="card @Classes @(msg.Deleted ? "border-danger" : "")">
    <div class="card-body p-3">
        <div class="card-title mb-0">
            <strong>@msg.Author</strong>
            <div class="label label-primary cursor-pointer ml-1 @UpvoteColor()" @onclick="ToggleUpvote">
                <span class="oi oi-thumb-up"></span>
                <span>@msg.ThumbsUpCount</span>
            </div>

            <div class="label label-default ml-1">@msg.TimeSent.ToLocalTime().ToString("dd.MM. yyyy HH:mm:ss")</div>
        </div>

        <div class="clearfix">

            <p class="card-text px-2 pt-2">@((MarkupString) TextTransformer.Transform(msg.Text))</p>

            @if (msg.Attachments.Count > 0)
            {
                <div class="mb-2">
                    @if (showAttachments)
                    {
                        <a @onclick="ToggleShowAttachments"><span class="oi oi-link-intact text-danger mr-2"></span>Skryť prílohy</a>
                        <div class="card-footer">
                            @if (imageAttachments.Count > 0)
                            {
                                <div class="mb-2">
                                    @foreach (Attachment a in imageAttachments)
                                    {
                                        <a @onclick="@(() => ShowImageModal(a.Content))"><img class="ml-2" style="max-width: 150px" src="@a.Content" alt="" /></a>
                                    }
                                </div>
                            }
                            @if (otherAttachments.Count > 0)
                            {
                                foreach (Attachment a in otherAttachments)
                                {
                                    <div>
                                        <a href="@a.Content" target="_blank" class="mr-2"><span class="oi oi-document mr-2"></span>@a.Content.Substring(a.Content.LastIndexOf('\\') + 1)</a>
                                    </div>
                                }
                            }
                        </div>
                    }
                    else
                    {
                        <a @onclick="ToggleShowAttachments"><span class="oi oi-link-intact mr-2"></span>Zobraziť prílohy (@msg.Attachments.Count)</a>
                    }
                </div>
            }

            @*<AuthorizeView Roles="Admin">*@
                @if (!edit)
                {
                    <button @onclick="ToggleEdit" type="button" class="btn btn-sm btn-outline-primary mr-2"><span class="oi oi-pencil mr-2"></span>Upraviť</button>
                }

                @if (msg.Deleted)
                {
                    <button @onclick="Renew" type="button" class="btn btn-sm btn-outline-success"><span class="oi oi-trash mr-2"></span>Obnoviť</button>
                }
                else
                {
                    <button @onclick="ShowDeleteModal" type="button" class="btn btn-sm btn-outline-danger"><span class="oi oi-trash mr-2"></span>Odstrániť</button>
                }

            @*</AuthorizeView>*@


            @if (!reply)
            {
                <button @onclick="ToggleReply" type="button" class="btn btn-sm btn-primary float-right"><span class="oi oi-comment-square mr-2"></span>Odpovedať</button>
            }


        </div>

        @if (edit)
        {
            <EditForm Model="newMsg" OnValidSubmit="Edit">
                <DataAnnotationsValidator />

                <label for="title" class="mt-4">Úprava správy</label>

                <InputTextArea @bind-Value="newMsg.Text"
                               class="form-control mb-2"
                               id="title"
                               placeholder="Správa..."
                               rows="5"
                               oninput="this.style.height = 'auto'; this.style.height = (this.scrollHeight) + 'px';"></InputTextArea>

                <ValidationMessage For="@(() => newMsg.Text)" />

                <button type="submit" class="btn btn-primary btn-sm mt-2"><span class="oi oi-pencil mr-2"></span>Upraviť</button>
                <button @onclick="ToggleEdit" type="button" class="btn btn-primary btn-sm mt-2 float-right"><span class="oi oi-x mr-2"></span>Zrušiť úpravy</button>

            </EditForm>
        }

        @if (reply)
        {
            <EditForm Model="newMsg" OnValidSubmit="Reply">
                <DataAnnotationsValidator />

                <label for="author" class="mt-4">Meno</label>
                <InputText @bind-Value="newMsg.Author" class="form-control mb-2" id="author" placeholder="Anonym"></InputText>

                <label for="title">Odpoveď</label>
                <InputTextArea @bind-Value="newMsg.Text"
                               class="form-control mb-2"
                               id="title"
                               placeholder="Správa..."
                               rows="5"
                               oninput="this.style.height = 'auto'; this.style.height = (this.scrollHeight) + 'px';"></InputTextArea>

                <ValidationMessage For="@(() => newMsg.Text)" />

                <button type="submit" class="btn btn-primary btn-sm mt-2"><span class="oi oi-envelope-closed mr-2"></span>Odoslať</button>
                <button @onclick="ToggleReply" type="button" class="btn btn-primary btn-sm mt-2 float-right"><span class="oi oi-x mr-2"></span>Zrušiť správu</button>
            </EditForm>
        }

        @foreach (Message child in this.msg.ChildMessages)
        {
            <MessageCard msg="@child" Classes="mt-4" />
        }
        
    </div>
</div>

@code {

    [CascadingParameter]
    public IModalService Modal { get; set; }

    [CascadingParameter]
    public IList<int> UpvotedMessages { get; set; }

    [CascadingParameter]
    public string Author { get; set; }

    [Parameter]
    public Message msg { get; set; }

    [Parameter]
    public string Classes { get; set; }

    public Message newMsg { get; set; }

    public bool edit { get; set; } = false;

    public bool reply { get; set; } = false;

    public bool showAttachments { get; set; } = false;

    public ICollection<Attachment> imageAttachments { get; set; }

    public ICollection<Attachment> otherAttachments { get; set; }

    protected override void OnParametersSet()
    {
        if (msg.Attachments.Count > 0)
        {
            ICollection<Attachment> others = new List<Attachment>();
            ICollection<Attachment> images = new List<Attachment>();

            foreach (Attachment a in msg.Attachments)
            {
                if (a.ContentType.Contains("image"))
                {
                    images.Add(a);

                }
                else
                {
                    others.Add(a);
                }
            }

            imageAttachments = images;
            otherAttachments = others;
        }

        base.OnParametersSet();
    }

    async Task ShowDeleteModal()
    {
        var modalOptions = new ModalOptions()
        {
            Position = ModalPosition.Center,
            FocusFirstElement = false
        };

        var confirmForm = Modal.Show<ConfirmDelete>("Naozaj chcete zmazať správu?", options: modalOptions);
        var result = await confirmForm.Result;

        if (!result.Cancelled)
        {
            await Hide();
        }
    }

    void ShowImageModal(string imgUrl)
    {
        var modalOptions = new ModalOptions()
        {
            Class = "blazored-modal col-10 col-sm-8 col-md-6",
            Position = ModalPosition.Center,
            FocusFirstElement = false,
            ContentScrollable = true
        };

        var modalParams = new ModalParameters();
        modalParams.Add("imgUrl", imgUrl);

        Modal.Show<ImageModal>(null, modalParams, modalOptions);
    }

    public void ToggleShowAttachments()
    {
        showAttachments = !showAttachments;
    }

    public void ToggleEdit()
    {
        newMsg = new Message();
        newMsg.Id = msg.Id;
        newMsg.Text = msg.Text;
        newMsg.ThumbsUpCount = msg.ThumbsUpCount;
        newMsg.Deleted = msg.Deleted;

        this.edit = !edit;
        this.reply = false;
    }

    public void ToggleReply()
    {
        newMsg = new Message();
        newMsg.Author = Author;

        this.reply = !reply;
        this.edit = false;
    }

    public async Task Reply()
    {
        var msgToSend = new Message() { Author = newMsg.Author, Text = newMsg.Text, ParentMessageId = msg.Id };

        await localStorage.SetItemAsync<string>("author", newMsg.Author);

        var response = await MessagesRepository.CreateMessage(msgToSend);

        if (response.HttpResponseMessage.IsSuccessStatusCode)
        {
            reply = false;

            Message result = response.Response;

            msg.ChildMessages.Add(result);

            StateHasChanged();
        }
    }

    public async Task Edit()
    {
        var response = await MessagesRepository.UpdateMessage(newMsg);

        if (response.HttpResponseMessage.IsSuccessStatusCode)
        {
            msg.Text = newMsg.Text;

            edit = false;
        }
    }

    public async Task Renew()
    {
        var response = await MessagesRepository.RenewMessage(msg.Id);

        if (response.HttpResponseMessage.IsSuccessStatusCode)
        {
            edit = false;

            msg.Deleted = false;

            StateHasChanged();
        }
    }

    public async Task Hide()
    {
        var response = await MessagesRepository.HideMessage(msg.Id);

        if (response.HttpResponseMessage.IsSuccessStatusCode)
        {
            edit = false;

            msg.Deleted = true;

            StateHasChanged();
        }
    }

    private string UpvoteColor()
    {
        return UpvotedMessages.Contains(msg.Id) ? "text-warning" : "";
    }

    public async Task ToggleUpvote()
    {
        if (UpvotedMessages != null)
        {
            if (!UpvotedMessages.Contains(msg.Id))
            {
                var response = await MessagesRepository.UpvoteMessage(msg.Id);

                if (response.HttpResponseMessage.IsSuccessStatusCode)
                {
                    msg.ThumbsUpCount++;

                    UpvotedMessages.Add(msg.Id);

                    await localStorage.SetItemAsync<IList<int>>("upvotedMessages", UpvotedMessages);

                    StateHasChanged();
                }
            }
            else
            {
                var response = await MessagesRepository.CancelMessageUpvote(msg.Id);

                if (response.HttpResponseMessage.IsSuccessStatusCode)
                {
                    msg.ThumbsUpCount--;

                    UpvotedMessages.Remove(msg.Id);

                    await localStorage.SetItemAsync<IList<int>>("upvotedMessages", UpvotedMessages);

                    StateHasChanged();
                }
            }
        }
    }
}