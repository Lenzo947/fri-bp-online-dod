@inject HttpClient httpClient
@inject NavigationManager navigationManager

<div class="card @this.Classes">
    <div class="card-body p-3">

        <h5 class="card-title">
            Anonym
        </h5>

        <div class="card-subtitle mb-2">

            <div class="badge badge-primary px-2 py-1">
                <span class="oi oi-thumb-up"></span>
                @msg.ThumbsUpCount
            </div>

            <div class="badge badge-secondary px-2 py-1">@msg.TimeSent.ToLocalTime().ToString("dd.MM. yyyy HH:mm:ss")</div>

            <div class="float-right">
                @if (!edit)
                {
                    <button @onclick="ToggleEdit" type="button" class="btn btn-sm btn-outline-primary"><span class="oi oi-pencil mr-2"></span>Upraviť</button>
                }
                
                <button @onclick="Delete" type="button" class="btn btn-sm btn-outline-danger"><span class="oi oi-trash mr-2"></span>Odstrániť</button>
            </div>
        </div>

        <div class="clearfix">
            <p class="card-text px-2 pt-2 pl-2">@msg.Text</p>
            @if (!reply)
            {
                <button @onclick="ToggleReply" type="button" class="btn btn-sm btn-primary float-right">Odpovedať</button>
            }

        </div>

        @if (edit)
        {
            newMsg = msg;
            <EditForm Model="newMsg" OnValidSubmit="Edit">
                <DataAnnotationsValidator />

                <label for="title" class="mt-2">Úprava správy</label>

                <InputTextArea @bind-Value="newMsg.Text"
                               class="form-control mb-2"
                               id="title"
                               placeholder="Správa..."
                               rows="5"
                               oninput="this.style.height = 'auto'; this.style.height = (this.scrollHeight) + 'px';"></InputTextArea>

                <div class="mb-2">
                    <ValidationSummary />
                </div>

                <div class="mb-5">
                    <button type="submit" class="btn btn-primary"><span class="oi oi-pencil mr-2"></span>Upraviť</button>
                    <button @onclick="ToggleEdit" type="button" class="btn btn-primary float-right"><span class="oi oi-x mr-2"></span>Zrušiť úpravy</button>
                </div>

            </EditForm>
        }

        @if (reply)
        {
            <EditForm Model="newMsg" OnValidSubmit="Reply">
                <DataAnnotationsValidator />

                <label for="title" class="mt-2">Odpoveď</label>

                <InputTextArea @bind-Value="newMsg.Text"
                               class="form-control mb-2"
                               id="title"
                               placeholder="Správa..."
                               rows="5"
                               oninput="this.style.height = 'auto'; this.style.height = (this.scrollHeight) + 'px';"></InputTextArea>

                <div class="mb-2">
                    <ValidationSummary />
                </div>

                <div class="mb-5">
                    <button type="submit" class="btn btn-primary"><span class="oi oi-envelope-closed mr-2"></span>Odoslať</button>
                    <button @onclick="ToggleReply" type="button" class="btn btn-primary float-right"><span class="oi oi-x mr-2"></span>Zrušiť správu</button>
                </div>
            </EditForm>
        }

        @foreach (Message child in this.msg.ChildMessages)
        {
            <MessageCard msg="@child" Classes="mt-4" />
        }
    </div>
</div>

@code {

    [Parameter]
    public Message msg { get; set; }

    [Parameter]
    public string Classes { get; set; }

    public Message newMsg { get; set; }

    public bool edit { get; set; } = false;

    public bool reply { get; set; } = false;


    public void ToggleEdit()
    {
        this.edit = !edit;
        this.reply = false;
    }

    public void ToggleReply()
    {
        newMsg = new Message();
        this.reply = !reply;
        this.edit = false;
    }

    public async Task Reply()
    {
        var payload = new { Text = newMsg.Text, ThumbsUpCount = new Random().Next(0, 100), ParentMessageId = msg.Id };

        var response = await httpClient.PostAsJsonAsync("https://localhost:44317/api/messages", payload);

        if (response.IsSuccessStatusCode)
        {
            navigationManager.NavigateTo("online-chat", true);
        }
    }

    public async Task Edit()
    {
        var response = await httpClient.PutAsJsonAsync("https://localhost:44317/api/messages/" + msg.Id, msg);

        if (response.IsSuccessStatusCode)
        {
            navigationManager.NavigateTo("online-chat", true);
        }
    }

    public async Task Delete() // won't work unless the message has no child messages (TODO: Modify text to a value of "message has been removed")
    {
        var response = await httpClient.DeleteAsync("https://localhost:44317/api/messages/" + msg.Id);

        if (response.IsSuccessStatusCode)
        {
            navigationManager.NavigateTo("online-chat", true);
        }
    }

}
