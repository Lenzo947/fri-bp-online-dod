@inject HttpClient httpClient
@inject NavigationManager navigationManager

<div class="card @this.Classes">
    <div class="card-body p-3">


        @if (msg.Deleted)
        {
            <h5 class="card-title text-muted">Neznámy</h5>
        }
        else
        {
            <h5 class="card-title">Anonym</h5>
        }

    <div class="card-subtitle mb-2">

            @if (!msg.Deleted)
            {
                <div class="badge badge-primary px-2 py-1">
                    <span class="oi oi-thumb-up"></span>
                    @msg.ThumbsUpCount
                </div>

                <div class="badge badge-secondary px-2 py-1">@msg.TimeSent.ToLocalTime().ToString("dd.MM. yyyy HH:mm:ss")</div>

                <div class="float-right">
                    @if (!edit)
                    {
                        <button @onclick="ToggleEdit" type="button" class="btn btn-sm btn-outline-primary"><span class="oi oi-pencil mr-2"></span>Upraviť</button>
                    }

                    <button @onclick="Delete" type="button" class="btn btn-sm btn-outline-danger"><span class="oi oi-trash mr-2"></span>Odstrániť</button>
                </div>
            }
        </div>

        <div class="clearfix">
            @if (msg.Deleted)
            {
                <p class="card-text text-muted px-2 pt-2 pl-2">Správa bola zmazaná, odpovede sú skryté</p>
            }
            else
            {
                <p class="card-text px-2 pt-2 pl-2">@msg.Text</p>

                if (!reply)
                {
                    <button @onclick="ToggleReply" type="button" class="btn btn-sm btn-primary float-right">Odpovedať</button>
                }
            }

        </div>

        @if (edit)
        {
            <EditForm Model="newMsg" OnValidSubmit="Edit">
                <DataAnnotationsValidator />

                <label for="title" class="mt-4">Úprava správy</label>

                <InputTextArea @bind-Value="newMsg.Text"
                               class="form-control mb-2"
                               id="title"
                               placeholder="Správa..."
                               rows="5"
                               oninput="this.style.height = 'auto'; this.style.height = (this.scrollHeight) + 'px';"></InputTextArea>

                <ValidationMessage For="@(() => newMsg.Text)" />

                <button type="submit" class="btn btn-primary mt-2"><span class="oi oi-pencil mr-2"></span>Upraviť</button>
                <button @onclick="ToggleEdit" type="button" class="btn btn-primary float-right"><span class="oi oi-x mr-2"></span>Zrušiť úpravy</button>

            </EditForm>
        }

        @if (reply)
        {
            <EditForm Model="newMsg" OnValidSubmit="Reply">
                <DataAnnotationsValidator />

                <label for="title" class="mt-4">Odpoveď</label>

                <InputTextArea @bind-Value="newMsg.Text"
                               class="form-control mb-2"
                               id="title"
                               placeholder="Správa..."
                               rows="5"
                               oninput="this.style.height = 'auto'; this.style.height = (this.scrollHeight) + 'px';"></InputTextArea>

                <ValidationMessage For="@(() => newMsg.Text)" />

                <button type="submit" class="btn btn-primary mt-2"><span class="oi oi-envelope-closed mr-2"></span>Odoslať</button>
                <button @onclick="ToggleReply" type="button" class="btn btn-primary float-right"><span class="oi oi-x mr-2"></span>Zrušiť správu</button>
            </EditForm>
        }

        @if (!msg.Deleted)
        {
            foreach (Message child in this.msg.ChildMessages)
            {
                <MessageCard msg="@child" Classes="mt-4" />
            }
        }
    </div>
</div>

@code {

    [Parameter]
    public Message msg { get; set; }

    [Parameter]
    public string Classes { get; set; }

    public Message newMsg { get; set; }

    public bool edit { get; set; } = false;

    public bool reply { get; set; } = false;


    public void ToggleEdit()
    {
        newMsg = new Message();
        newMsg.Text = msg.Text;
        newMsg.ThumbsUpCount = msg.ThumbsUpCount;
        newMsg.Deleted = false;

        this.edit = !edit;
        this.reply = false;
    }

    public void ToggleReply()
    {
        newMsg = new Message();

        this.reply = !reply;
        this.edit = false;
    }

    public async Task Reply()
    {
        var payload = new { Text = newMsg.Text, ParentMessageId = msg.Id };

        var response = await httpClient.PostAsJsonAsync("api/messages", payload);

        if (response.IsSuccessStatusCode)
        {
            reply = false;

            Message result = await response.Content.ReadFromJsonAsync<Message>();

            msg.ChildMessages.Add(result);

            StateHasChanged();
        }
    }

    public async Task Edit()
    {
        var response = await httpClient.PutAsJsonAsync($"api/messages/{msg.Id}", newMsg);

        if (response.IsSuccessStatusCode)
        {
            msg.Text = newMsg.Text;

            edit = false;
        }
    }

    public async Task Delete()
    {
        var changes = new { Deleted = true };

        StringContent payload = changes.ToPatchJsonContent();

        var response = await httpClient.PatchAsync($"api/messages/{msg.Id}", payload);

        if (response.IsSuccessStatusCode)
        {
            msg.Deleted = true;

            StateHasChanged();
        }
    }

}