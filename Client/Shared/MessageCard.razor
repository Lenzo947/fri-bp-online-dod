@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject ILocalStorageService localStorage

<div class="card @this.Classes">
    <div class="card-body p-3">


        @if (msg.Deleted)
        {
            <div class="card-title text-muted mb-0">
                <strong>Neznámy</strong>
            </div>
        }
        else
        {
            <div class="card-title mb-0">
                <strong>@msg.Author</strong>
                <div class="label label-primary cursor-pointer ml-1 @UpvoteColor()" @onclick="ToggleUpvote">
                    <span class="oi oi-thumb-up"></span>
                    <span>@msg.ThumbsUpCount</span>
                </div>

                <div class="label label-default ml-1">@msg.TimeSent.ToLocalTime().ToString("dd.MM. yyyy HH:mm:ss")</div>
            </div>

        }

    <div class="clearfix">
        @if (msg.Deleted)
        {
            <p class="card-text text-muted px-2 pt-2 pl-2">Správa bola zmazaná, odpovede sú skryté</p>
            <AuthorizeView>
                <button @onclick="Renew" type="button" class="btn btn-sm btn-outline-success"><span class="oi oi-trash mr-2"></span>Obnoviť</button>
            </AuthorizeView>
        }
        else
        {
            <p class="card-text px-2 pt-2 pl-2">@((MarkupString) TextTransformer.Transform(msg.Text))</p>

            if (msg.Attachments.Count > 0)
            {
                <div class="mb-2">
                    @if (showAttachments)
                    {
                        <a @onclick="ToggleShowAttachments"><span class="oi oi-link-intact text-danger mr-2"></span>Skryť prílohy</a>
                        <div class="card-footer">

                            @foreach (Attachment a in msg.Attachments)
                            {
                                <img style="max-width: 150px" src="@a.Content" class="mr-2" />
                            }
                        </div>
                    }
                    else
                    {
                        <a @onclick="ToggleShowAttachments"><span class="oi oi-link-intact mr-2"></span>Zobraziť prílohy (@msg.Attachments.Count)</a>
                    }
                </div>
            }

            <AuthorizeView>
                @if (!edit)
                {
                    <button @onclick="ToggleEdit" type="button" class="btn btn-sm btn-outline-primary mr-2"><span class="oi oi-pencil mr-2"></span>Upraviť</button>
                }

                <button @onclick="ShowDeleteModal" type="button" class="btn btn-sm btn-outline-danger"><span class="oi oi-trash mr-2"></span>Odstrániť</button>
            </AuthorizeView>


            if (!reply)
            {
                <button @onclick="ToggleReply" type="button" class="btn btn-sm btn-primary float-right"><span class="oi oi-comment-square mr-2"></span>Odpovedať</button>
            }
        }

    </div>

        @if (edit)
        {
            <EditForm Model="newMsg" OnValidSubmit="Edit">
                <DataAnnotationsValidator />

                <label for="title" class="mt-4">Úprava správy</label>

                <InputTextArea @bind-Value="newMsg.Text"
                               class="form-control mb-2"
                               id="title"
                               placeholder="Správa..."
                               rows="5"
                               oninput="this.style.height = 'auto'; this.style.height = (this.scrollHeight) + 'px';"></InputTextArea>

                <ValidationMessage For="@(() => newMsg.Text)" />

                <button type="submit" class="btn btn-primary btn-sm mt-2"><span class="oi oi-pencil mr-2"></span>Upraviť</button>
                <button @onclick="ToggleEdit" type="button" class="btn btn-primary btn-sm mt-2 float-right"><span class="oi oi-x mr-2"></span>Zrušiť úpravy</button>

            </EditForm>
        }

        @if (reply)
        {
            <EditForm Model="newMsg" OnValidSubmit="Reply">
                <DataAnnotationsValidator />

                <label for="author" class="mt-4">Meno</label>
                <InputText @bind-Value="newMsg.Author" class="form-control mb-2" id="author" placeholder="Anonym"></InputText>

                <label for="title">Odpoveď</label>
                <InputTextArea @bind-Value="newMsg.Text"
                               class="form-control mb-2"
                               id="title"
                               placeholder="Správa..."
                               rows="5"
                               oninput="this.style.height = 'auto'; this.style.height = (this.scrollHeight) + 'px';"></InputTextArea>

                <ValidationMessage For="@(() => newMsg.Text)" />

                <button type="submit" class="btn btn-primary btn-sm mt-2"><span class="oi oi-envelope-closed mr-2"></span>Odoslať</button>
                <button @onclick="ToggleReply" type="button" class="btn btn-primary btn-sm mt-2 float-right"><span class="oi oi-x mr-2"></span>Zrušiť správu</button>
            </EditForm>
        }

        @if (!msg.Deleted)
        {
            foreach (Message child in this.msg.ChildMessages)
            {
                <MessageCard msg="@child" Classes="mt-4" />
            }
        }
    </div>
</div>

@code {        

    [CascadingParameter]
    public IModalService Modal { get; set; }

    [CascadingParameter]
    public IList<int> UpvotedMessages { get; set; }

    [CascadingParameter]
    public string Author { get; set; }

    [Parameter]
    public Message msg { get; set; }

    [Parameter]
    public string Classes { get; set; }

    public Message newMsg { get; set; }

    public bool edit { get; set; } = false;

    public bool reply { get; set; } = false;

    public bool showAttachments { get; set; } = false;

    async Task ShowDeleteModal()
    {
        var confirmForm = Modal.Show<ConfirmDelete>("Naozaj chcete zmazať správu?");
        var result = await confirmForm.Result;

        if (!result.Cancelled)
        {
            await Delete();
        }
    }

    public void ToggleShowAttachments()
    {
        showAttachments = !showAttachments;
    }

    public void ToggleEdit()
    {
        newMsg = new Message();
        newMsg.Text = msg.Text;
        newMsg.ThumbsUpCount = msg.ThumbsUpCount;
        newMsg.Deleted = false;

        this.edit = !edit;
        this.reply = false;
    }

    public void ToggleReply()
    {
        newMsg = new Message();
        newMsg.Author = Author;

        this.reply = !reply;
        this.edit = false;
    }

    public async Task Reply()
    {
        var payload = new { Author = newMsg.Author, Text = newMsg.Text, ParentMessageId = msg.Id };

        await localStorage.SetItemAsync<string>("author", newMsg.Author);

        var response = await httpClient.PostAsJsonAsync("api/messages", payload);

        if (response.IsSuccessStatusCode)
        {
            reply = false;

            Message result = await response.Content.ReadFromJsonAsync<Message>();

            msg.ChildMessages.Add(result);

            StateHasChanged();
        }
    }

    public async Task Edit()
    {
        var response = await httpClient.PutAsJsonAsync($"api/messages/{msg.Id}", newMsg);

        if (response.IsSuccessStatusCode)
        {
            msg.Text = newMsg.Text;

            edit = false;
        }
    }

    public async Task Renew()
    {
        var changes = new { Deleted = false };

        StringContent payload = changes.ToPatchJsonContent();

        var response = await httpClient.PatchAsync($"api/messages/{msg.Id}", payload);

        if (response.IsSuccessStatusCode)
        {
            edit = false;

            msg.Deleted = false;

            StateHasChanged();
        }
    }

    public async Task Delete()
    {
        var changes = new { Deleted = true };

        StringContent payload = changes.ToPatchJsonContent();

        var response = await httpClient.PatchAsync($"api/messages/{msg.Id}", payload);

        if (response.IsSuccessStatusCode)
        {
            edit = false;

            msg.Deleted = true;

            StateHasChanged();
        }
    }

    private string UpvoteColor()
    {
        return UpvotedMessages.Contains(msg.Id) ? "text-warning" : "";
    }

    public async Task ToggleUpvote()
    {
        if (UpvotedMessages != null)
        {
            var _msg = await httpClient.GetFromJsonAsync<Message>($"api/messages/{msg.Id}");

            if (!UpvotedMessages.Contains(msg.Id))
            {
                var changes = new { ThumbsUpCount =_msg.ThumbsUpCount + 1 };

                StringContent payload = changes.ToPatchJsonContent();

                var response = await httpClient.PatchAsync($"api/messages/{msg.Id}", payload);

                if (response.IsSuccessStatusCode)
                {
                    msg.ThumbsUpCount = changes.ThumbsUpCount;

                    UpvotedMessages.Add(msg.Id);

                    await localStorage.SetItemAsync<IList<int>>("upvotedMessages", UpvotedMessages);

                    StateHasChanged();
                }
            }
            else
            {
                var changes = new { ThumbsUpCount = _msg.ThumbsUpCount - 1 };

                StringContent payload = changes.ToPatchJsonContent();

                var response = await httpClient.PatchAsync($"api/messages/{msg.Id}", payload);

                if (response.IsSuccessStatusCode)
                {
                    msg.ThumbsUpCount = changes.ThumbsUpCount;

                    UpvotedMessages.Remove(msg.Id);

                    await localStorage.SetItemAsync<IList<int>>("upvotedMessages", UpvotedMessages);

                    StateHasChanged();
                }
            }
        }
    }
}