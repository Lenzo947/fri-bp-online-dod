@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject IJSRuntime JS
@inject ILocalStorageService localStorage
@inject IHttpRepo httpRepository
@using System.Net.Http.Headers;
@using HeyRed.Mime;

<EditForm Model="MessageModel" OnValidSubmit="Add">

    <DataAnnotationsValidator />

    <label for="author">Meno</label>
    <InputText @bind-Value="MessageModel.Author" class="form-control mb-2" id="author" placeholder="Anonym"></InputText>

    <label for="title">Správa</label>
    <InputTextArea @bind-Value="MessageModel.Text" class="form-control mb-2" id="title" placeholder="Správa..." rows="5"
                   oninput="this.style.height = 'auto'; this.style.height = (this.scrollHeight) + 'px';"></InputTextArea>
    <ValidationMessage For="@(() => MessageModel.Text)" />

    @if (ShowAttachments)
    {
        <AttachmentWindow AddAttachments="AddAttachments" />

        if (filesToUpload.Count > 0)
        {
            foreach (var file in filesToUpload)
            {
                <div class="mt-1">
                    <p><a @onclick="() => RemoveAttachment(file)"><span class="oi oi-x text-danger mr-2"></span></a>@file.Name</p>
                </div>
            }
        }
    }

    <div class="mb-5 mt-2">
        <button type="submit" class="btn btn-primary btn-sm mr-2"><span class="oi oi-envelope-closed mr-2"></span>Odoslať</button>
        @if (ShowAttachments)
        {
            <a @onclick="ToggleAttach"><span class="oi oi-link-intact text-danger mr-2"></span>Zrušiť prílohy</a>
        }
        else
        {
            <a @onclick="ToggleAttach"><span class="oi oi-link-intact mr-2"></span>Pridať prílohy</a>
        }
    </div>
</EditForm>

@code {

    [Parameter]
    public EventCallback<Message> AddedMessage { get; set; }

    protected Message MessageModel { get; set; } = new Message();

    [CascadingParameter]
    public string Author { get; set; }

    public bool ShowAttachments { get; set; } = false;

    public ICollection<IBrowserFile> filesToUpload { get; set; } = new List<IBrowserFile>();
    public ICollection<string> fileUrls { get; set; } = new List<string>();


    protected override void OnInitialized()
    {
        MessageModel.Author = Author;
    }

    protected async Task Add()
    {
        if (MessageModel.Author == "")
        {
            MessageModel.Author = "Anonym";
        }
        else
        {
            Author = MessageModel.Author;
            await localStorage.SetItemAsync<string>("author", MessageModel.Author);
        }

        var payload = new { Author = MessageModel.Author, Text = MessageModel.Text };

        var response = await httpClient.PostAsJsonAsync("api/messages", payload);

        if (response.IsSuccessStatusCode)
        {
            var msg = await response.Content.ReadFromJsonAsync<Message>();

            if (filesToUpload.Count > 0)
            {
                await UploadFiles(msg.Id);
                await AddedMessage.InvokeAsync(msg);
            }
            else
            {
                await AddedMessage.InvokeAsync(msg);
            }

            ClearFields();
        }
    }

    private async Task UploadFiles(int msgId)
    {
        string newFileUrl;

        Console.WriteLine(msgId);

        foreach (var file in filesToUpload)
        {
            if (file != null)
            {
                //var resizedFile = await imageFile.RequestImageFileAsync("image/png", 4096, 4096);

                using (var ms = file.OpenReadStream(file.Size))
                {
                    var content = new MultipartFormDataContent();
                    content.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data");
                    content.Add(new StreamContent(ms, Convert.ToInt32(file.Size)), MimeTypesMap.GetMimeType(file.Name), file.Name);

                    newFileUrl = await httpRepository.UploadFile(content);
                    fileUrls.Add(newFileUrl);

                    //await OnChange.InvokeAsync(newFileUrl);
                }

                var payload = new { ContentType = MimeTypesMap.GetMimeType(newFileUrl), Content = newFileUrl.Substring(newFileUrl.LastIndexOf("/files") + 1), MessageId = msgId };

                var response = await httpClient.PostAsJsonAsync("api/attachments", payload);
            }
        }

    }

    private void RemoveAttachment(IBrowserFile file)
    {
        filesToUpload.Remove(file);
    }

    private void AddAttachments(ICollection<IBrowserFile> files)
    {
        foreach (var file in files)
        {
            if (!filesToUpload.Contains(file))
            {
                filesToUpload.Add(file);
            }
        }
    }

    protected void ToggleAttach()
    {
        ShowAttachments = !ShowAttachments;
    }

    protected void ClearFields()
    {
        MessageModel.Text = null;
        ShowAttachments = false;
    }

}
